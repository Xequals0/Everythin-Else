/* CS 214: Systems Programming Spring 2018
 *  Professor Francisco
 *  Assignment 3: A Better Open
 *  Richard Farrington netid: raf172
 *  Anirudh Tunoori netid: at813
 */

~~~~~testplan.txt ~~~~~
This project required extensive testing in order to determine the extent of success of the various functions supported by libnetfiles. Along with testing and ensuring the success of each of the net functions, it is important to test if errors are caught/recognized/flagged appropriately. It is important to determine that appropriate error messages and errnoâ€™s are called. We created a client program called client.c. We ran the client executable after running the server and checking if we were able to establish and maintain a connection. It is important to test that all of the steps of the client server architecture are done correctly (with the appropriate error being provided in the event of failure). Steps such as bind(), listen() and accept() are critical. Our client initiates a connection by calling netserverinit(). When testing our program we ran client and server/libnet on different ilab machines and unique for numbers. A unique challenge was ensuring that other users were not making use of the same port number simultaneously. We have a directory called testfiles that contains several testfiles. We also have a subdirectory containing additional testfiles, including one that is read only (by the user). We felt that it was important to test if we could access and read/write from/to files with longer paths. We tested a file that was empty, one with only special characters and numbers, one with random characters, one with the US Bill Of Rights and one or two testfiles containing songs. We felt that it was important to check if our implementation could handle a wide array of cases. We also tested using different byte/size values for read and write. It was also important to test the multi-threaded component of our project by connecting multiple clients (on different ilab machines and port numbers). We also determined that we could access the same and different files with each client and perform different operations containing different parameters. Overall we felt that our approach in testing our implementation was concise and effective and that we addressed a wide array of scenarios (such as errors).